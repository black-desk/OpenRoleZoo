cmake_minimum_required(VERSION 2.7)
project(ORZ)

option(ORZ_INSTALL "Supporting install script" ON)

# option for platform
set(PLATFORM "auto" CACHE STRING "auto, x86 or x64")
set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Debug or Release")
set(CONFIGURATION ${CMAKE_BUILD_TYPE})

# GCC flags

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=c++11")
set(CMAKE_CXX_CREATE_SHARED_LIBRARY "${CMAKE_CXX_CREATE_SHARED_LIBRARY} -fPIC")
set(CMAKE_CXX_CREATE_SHARED_MODULE "${CMAKE_CXX_CREATE_SHARED_MODULE} -fPIC")

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")

message(STATUS "Platform: ${PLATFORM}")

if ("${PLATFORM}" STREQUAL "x86")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")
elseif ("${PLATFORM}" STREQUAL "x64")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m64")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64")
endif()

message(STATUS "Configuration: ${CONFIGURATION}")

if ("${CONFIGURATION}" STREQUAL "Debug")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O0 -g -ggdb")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g -ggdb")
else()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
endif()

# set flags

set(ENV_RUNTIME_DIR "bin")
set(ENV_LIBRARY_DIR "lib")
set(ENV_ARCHIVE_DIR "lib")
set(ENV_HEADER_DIR "include")
set(ENV_SUFFIX "")

if (MSVC)
	if ("${PLATFORM}" STREQUAL "")
	elseif("${PLATFORM}" STREQUAL "auto")
	else ()
		set(ENV_RUNTIME_DIR ${ENV_RUNTIME_DIR}/${PLATFORM})
		set(ENV_LIBRARY_DIR ${ENV_LIBRARY_DIR}/${PLATFORM})
		set(ENV_ARCHIVE_DIR ${ENV_ARCHIVE_DIR}/${PLATFORM})
	endif ()
elseif (MINGW)
	if ("${PLATFORM}" STREQUAL "")
	elseif("${PLATFORM}" STREQUAL "auto")
	else ()
		set(ENV_RUNTIME_DIR ${ENV_RUNTIME_DIR}/${PLATFORM})
		set(ENV_LIBRARY_DIR ${ENV_LIBRARY_DIR}/${PLATFORM})
		set(ENV_ARCHIVE_DIR ${ENV_ARCHIVE_DIR}/${PLATFORM})
	endif ()
else()
	if ("${PLATFORM}" STREQUAL "")
	elseif ("${PLATFORM}" STREQUAL "auto")
	elseif ("${PLATFORM}" STREQUAL "x86")
		set(ENV_RUNTIME_DIR ${ENV_RUNTIME_DIR})
		set(ENV_LIBRARY_DIR ${ENV_LIBRARY_DIR}32)
		set(ENV_ARCHIVE_DIR ${ENV_ARCHIVE_DIR}32)
	elseif ("${PLATFORM}" STREQUAL "x64")
		set(ENV_RUNTIME_DIR ${ENV_RUNTIME_DIR})
		set(ENV_LIBRARY_DIR ${ENV_LIBRARY_DIR}64)
		set(ENV_ARCHIVE_DIR ${ENV_ARCHIVE_DIR}64)
	else ()
		set(ENV_RUNTIME_DIR ${ENV_RUNTIME_DIR}/${PLATFORM})
		set(ENV_LIBRARY_DIR ${ENV_LIBRARY_DIR}/${PLATFORM})
		set(ENV_ARCHIVE_DIR ${ENV_ARCHIVE_DIR}/${PLATFORM})
	endif ()
endif()

if ("${CONFIGURATION}" STREQUAL "Debug")
	set(ENV_SUFFIX "d")
endif ()

set(ENV_INCLUDE_DIR ${ENV_HEADER_DIR})

set(CMAKE_INSTALL_PREFIX ${PROJECT_BINARY_DIR}/build CACHE STRING "set install prefix")
install(CODE "MESSAGE(\"Installing into ${CMAKE_INSTALL_PREFIX}\")")

set(LOCAL_OUTPUT_DIR ${PROJECT_SOURCE_DIR})

if (LOCAL_OUTPUT_DIR)
    set(EXECUTABLE_OUTPUT_PATH ${LOCAL_OUTPUT_DIR}/${ENV_RUNTIME_DIR})
    set(LIBRARY_OUTPUT_PATH ${LOCAL_OUTPUT_DIR}/${ENV_LIBRARY_DIR})
endif ()

add_subdirectory(src)
